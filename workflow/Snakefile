# Main Snakefile for ANGSD Snakemake Pipeline

# Include all rule Snakefiles for workflow


include: "rules/common.smk"
include: "rules/0.1_ref_prep.smk"
include: "rules/0.2_ref_filt.smk"
include: "rules/1.0_preprocessing.smk"
include: "rules/2.0_mapping.smk"
include: "rules/2.1_sample_qc.smk"
include: "rules/2.2_dna_damage.smk"
include: "rules/3.0_genotype_likelihoods.smk"
include: "rules/3.1_safs.smk"
include: "rules/3.2_beagles.smk"
include: "rules/4.0_estimate_LD.smk"
include: "rules/4.1_linkage_pruning.smk"
include: "rules/4.2_linkage_decay.smk"
include: "rules/5.0_relatedness.smk"
include: "rules/6.0_pca.smk"
include: "rules/6.1_admixture.smk"
include: "rules/7.0_SFS.smk"
include: "rules/7.1_thetas.smk"
include: "rules/7.2_fst.smk"
include: "rules/7.3_heterozygosity.smk"
include: "rules/8.0_inbreeding.smk"
include: "rules/9.0_IBS.smk"


# Set wildcard restraints

if config["downsample_cov"]:
    dp = config["downsample_cov"]
    subsample = [f".dp{dp}", ""]
else:
    subsample = [""]


wildcard_constraints:
    ref=config["reference"]["name"],
    dataset=config["dataset"],
    sample="|".join(samples.index.tolist()),
    population="|".join(
        ["all"]
        + ["all_excl_pca-admix"]
        + [i for i in samples.index.tolist()]
        + [i for i in samples.population.values.tolist()]
        + [i for i in samples.depth.values.tolist()]
    ),
    dp=(subsample[0] + "|.{0}" if len(subsample) == 2 else ".{0}"),
    chunk="[0-9]+",


# Accumulate desired output files from config file

all_outputs = [
    "results/datasets/{dataset}/qc/{dataset}.{ref}_all{dp}.sampleqc.html",
    "results/datasets/{dataset}/filters/combined/{dataset}.{ref}{dp}_{sites}-filts.html",
]

if config["analyses"]["qualimap"]:
    all_outputs.append("results/mapping/qc/qualimap/{sample}.{ref}/report.pdf")

if config["analyses"]["damageprofiler"]:
    all_outputs.append(
        "results/mapping/qc/damageprofiler/{histsample}.{ref}/dmgprof.json"
    )

if config["analyses"]["endogenous_content"]:
    all_outputs.append(
        "results/datasets/{dataset}/qc/endogenous_content/{dataset}.{ref}_all.endo.tsv"
    )

if config["analyses"]["estimate_ld"]:
    all_outputs.extend(
        expand(
            "results/datasets/{{dataset}}/analyses/ngsLD/{{dataset}}.{{ref}}_{population}{{dp}}_{{sites}}-filts.ld_maxkbdist-{maxkb}_rndsample-{rndsmp}.gz",
            population=pop_list + ["all"],
            maxkb=config["params"]["ngsld"]["max_kb_dist_est-ld"],
            rndsmp=config["params"]["ngsld"]["rnd_sample_est-ld"],
        )
    )

if config["analyses"]["ld_decay"]:
    all_outputs.extend(
        expand(
            "results/datasets/{{dataset}}/plots/LD_decay/{{dataset}}.{{ref}}_{population}{{dp}}_{{sites}}-filts.LDdecay.svg",
            population=pop_list + ["all"],
        )
    )

if config["analyses"]["relatedness"]["ngsrelate"]:
    all_outputs.append(
        "results/datasets/{dataset}/analyses/kinship/ngsrelate/{dataset}.{ref}_all{dp}_{sites}-filts_relate.html"
    )

if config["analyses"]["relatedness"]["waples2019"]:
    all_outputs.append(
        "results/datasets/{dataset}/analyses/kinship/waples2019/{dataset}.{ref}_all{dp}_{sites}-filts.kinship.html"
    )

if config["analyses"]["pca_pcangsd"]:
    if config["excl_pca-admix"]:
        all_outputs.extend(
            [
                "results/datasets/{dataset}/plots/pca/{dataset}.{ref}_all_excl_pca-admix{dp}_{sites}-filts_pc1-2.svg",
                "results/datasets/{dataset}/plots/pca/{dataset}.{ref}_all_excl_pca-admix{dp}_{sites}-filts_pc3-4.svg",
            ]
        )
    else:
        all_outputs.extend(
            [
                "results/datasets/{dataset}/plots/pca/{dataset}.{ref}_all{dp}_{sites}-filts_pc1-2.svg",
                "results/datasets/{dataset}/plots/pca/{dataset}.{ref}_all{dp}_{sites}-filts_pc3-4.svg",
            ]
        )

if config["analyses"]["thetas_angsd"]:
    all_outputs.extend(
        expand(
            "results/datasets/{{dataset}}/analyses/thetas/{{dataset}}.{{ref}}_all{{dp}}_{{sites}}-filts.window_{win}_{step}.{stat}.mean.html",
            stat=["watterson", "pi", "tajima"],
            win=config["params"]["thetas"]["win_size"],
            step=config["params"]["thetas"]["win_step"],
        )
    )

if config["analyses"]["fst_angsd"]["populations"]:
    all_outputs.append(
        "results/datasets/{dataset}/plots/fst/{dataset}.{ref}_poppairs{dp}_{sites}-filts.fst.global.pdf",
    )
    all_outputs.extend(
        expand(
            "results/datasets/{{dataset}}/analyses/fst/{{dataset}}.{{ref}}_poppairs{{dp}}_{{sites}}-filts.fst.window_{win}_{step}.tsv",
            win=config["params"]["fst"]["win_size"],
            step=config["params"]["fst"]["win_step"],
        )
    )

if config["analyses"]["fst_angsd"]["individuals"]:
    all_outputs.append(
        "results/datasets/{dataset}/plots/fst/{dataset}.{ref}_indpairs{dp}_{sites}-filts.fst.global.pdf",
    )
    all_outputs.extend(
        expand(
            "results/datasets/{{dataset}}/analyses/fst/{{dataset}}.{{ref}}_indpairs{{dp}}_{{sites}}-filts.fst.window_{win}_{step}.tsv",
            win=config["params"]["fst"]["win_size"],
            step=config["params"]["fst"]["win_step"],
        )
    )

if config["analyses"]["heterozygosity_angsd"]:
    all_outputs.extend(
        [
            "results/datasets/{dataset}/plots/heterozygosity/{dataset}.{ref}_all{dp}_{sites}-filts_heterozygosity.pdf",
            "results/datasets/{dataset}/analyses/heterozygosity/{dataset}.{ref}_all{dp}_{sites}-filts_heterozygosity.html",
        ]
    )

if config["analyses"]["inbreeding_ngsf-hmm"]:
    all_outputs.append(
        "results/datasets/{dataset}/plots/inbreeding/{dataset}.{ref}_all{dp}_{sites}-filts.froh.pdf"
    )

if config["analyses"]["admix_ngsadmix"]:
    if config["excl_pca-admix"]:
        all_outputs.extend(
            expand(
                [
                    "results/datasets/{{dataset}}/plots/evaladmix/{{dataset}}.{{ref}}_all_excl_pca-admix{{dp}}_{{sites}}-filts_K{kvalue}_evaladmix.html",
                    "results/datasets/{{dataset}}/plots/ngsadmix/{{dataset}}.{{ref}}_all_excl_pca-admix{{dp}}_{{sites}}-filts_K{kvalue}.svg",
                ],
                kvalue=config["params"]["ngsadmix"]["kvalues"],
            )
        )
    else:
        all_outputs.extend(
            expand(
                [
                    "results/datasets/{{dataset}}/plots/evaladmix/{{dataset}}.{{ref}}_all{{dp}}_{{sites}}-filts_K{kvalue}_evaladmix.html",
                    "results/datasets/{{dataset}}/plots/ngsadmix/{{dataset}}.{{ref}}_all{{dp}}_{{sites}}-filts_K{kvalue}.svg",
                ],
                kvalue=config["params"]["ngsadmix"]["kvalues"],
            )
        )

if config["analyses"]["ibs_matrix"]:
    all_outputs.append(
        "results/datasets/{dataset}/analyses/IBS/{dataset}.{ref}_all{dp}_{sites}-filts.ibsMat"
    )


# Master target rule
rule all:
    input:
        expand(
            all_outputs,
            sample=samples.index,
            ref=config["reference"]["name"],
            histsample=samples.index[samples["time"] == "historical"].tolist(),
            dataset=config["dataset"],
            dp=subsample,
            sites=filters,
        ),

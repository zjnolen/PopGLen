# Snakemake workflow for performing several population genomic comparisons of population replicates across two different
# habitat categories and two different time periods. These units however can be changed to any categorical variable with
# two different types.

include: "rules/common.smk"

include: "rules/0.1_ref_prep.smk"
include: "rules/0.2_ref_filt.smk"
include: "rules/1.0_preprocessing.smk"
include: "rules/2.0_mapping.smk"
include: "rules/2.1_mapping_qc.smk"
include: "rules/2.2_dna_damage.smk"
include: "rules/3.0_genotyping.smk"
include: "rules/3.1_linkage_pruning.smk"
include: "rules/3.2_sample_filt.smk"
include: "rules/4_pca.smk"
include: "rules/5_admixture.smk"
include: "rules/6.0_SFS.smk"
include: "rules/6.1_thetas.smk"
include: "rules/6.2_fst.smk"
include: "rules/7_inbreeding.smk"

# Accumulate desired output files from config file

if config["downsample_cov"]:
	dp = config["downsample_cov"]
	subsample = [f".dp{dp}", ""]
else:
	subsample = [""]

wildcard_constraints:
	ref=config["reference"]["name"],
	dataset=config["dataset"],
	sample="|".join(
		samples.index.tolist()
	),
	population="|".join(
		["all"] + 
		["all_excl_pca-admix"] +
		[i for i in samples.index.tolist()] +
		[i for i in samples.population.values.tolist()] +
		[i for i in samples.depth.values.tolist()]
		),
	dp=(subsample[0]+"|.{0}" if len(subsample)==2 else ".{0}"),
	chunk="[0-9]+"

all_outputs = []

if config["analyses"]["qualimap"]:
	all_outputs.append("results/mapping/qc/qualimap/{sample}.{ref}/genome_results.txt")

if config["analyses"]["damageprofiler"]:
	all_outputs.append("results/mapping/qc/damageprofiler/{histsample}.{ref}/dmgprof.json")

if config["analyses"]["endogenous_content"]:
	all_outputs.append("results/datasets/{dataset}/qc/endogenous_content/{dataset}.{ref}_all.endo.tsv")

if config["analyses"]["relatedness"]["ngsrelate"]:
	all_outputs.append("results/datasets/{dataset}/analyses/kinship/ngsrelate/{dataset}.{ref}_all{dp}_relate.html")

if config["analyses"]["relatedness"]["waples2019"]:
	all_outputs.append("results/datasets/{dataset}/analyses/kinship/waples2019/{dataset}.{ref}_all{dp}.kinship.html")

if config["analyses"]["pca_pcangsd"]:
	if config["excl_pca-admix"]:
		all_outputs.extend(["results/datasets/{dataset}/plots/pca/{dataset}.{ref}_all_excl_pca-admix{dp}_pc1-2.svg", "results/datasets/{dataset}/plots/pca/{dataset}.{ref}_all_excl_pca-admix{dp}_pc3-4.svg"])
	else:
		all_outputs.extend(["results/datasets/{dataset}/plots/pca/{dataset}.{ref}_all{dp}_pc1-2.svg","results/datasets/{dataset}/plots/pca/{dataset}.{ref}_all{dp}_pc3-4.svg"])

if config["analyses"]["thetas_angsd"]:
	all_outputs.extend(expand("results/datasets/{{dataset}}/plots/thetas/{{dataset}}.{{ref}}_all{{dp}}.{stat}.pdf",
		stat=["watterson","pi","tajima"]))

if config["analyses"]["fst_angsd"]["populations"]:
	all_outputs.append("results/datasets/{dataset}/plots/fst/{dataset}.{ref}_poppairs{dp}_fst.pdf")

if config["analyses"]["fst_angsd"]["individuals"]:
	all_outputs.append("results/datasets/{dataset}/analyses/fst/{dataset}.{ref}_indpairs{dp}.fst.sum")

if config["analyses"]["heterozygosity_angsd"]:
	all_outputs.append("results/datasets/{dataset}/plots/heterozygosity/{dataset}.{ref}_all{dp}_heterozygosity.pdf")

if config["analyses"]["inbreeding_ngsf-hmm"]:
	all_outputs.extend(expand("results/datasets/{{dataset}}/plots/inbreeding/{{dataset}}.{{ref}}_all{{dp}}.{stat}.pdf",
		stat=["froh","rohreg"])
		)

if config["analyses"]["admix_ngsadmix"]:
	if config["excl_pca-admix"]:
		all_outputs.extend(
			expand(
				["results/datasets/{{dataset}}/plots/evaladmix/{{dataset}}.{{ref}}_all_excl_pca-admix{{dp}}_K{kvalue}_evaladmix.html",
				"results/datasets/{{dataset}}/plots/ngsadmix/{{dataset}}.{{ref}}_all_excl_pca-admix{{dp}}_K{kvalue}.svg"],
				kvalue=config["params"]["ngsadmix"]["kvalues"])
			)
	else:
		all_outputs.extend(
			expand(
				["results/datasets/{{dataset}}/plots/evaladmix/{{dataset}}.{{ref}}_all{{dp}}_K{kvalue}_evaladmix.html",
				"results/datasets/{{dataset}}/plots/ngsadmix/{{dataset}}.{{ref}}_all{{dp}}_K{kvalue}.svg"],
				kvalue=config["params"]["ngsadmix"]["kvalues"])
			)

if config["analyses"]["ibs_matrix"]:
	all_outputs.append("results/datasets/{dataset}/analyses/IBS/{dataset}.{ref}_all{dp}.ibsMat")

# master target rule
rule all:
	input:
		expand(all_outputs,
			sample=samples.index,
			ref=config["reference"]["name"],
			histsample=samples.index[samples['time'] == 'historical'].tolist(),
			dataset=config["dataset"],
			dp=subsample)